plugins {
    id "org.springframework.boot" version "$springBootVersion"
    id "io.spring.dependency-management" version "$springDependencyManagerVersion"
    id "com.google.cloud.tools.jib" version "$jibPluginVersion"
    id 'java'
    id 'idea'
}

group = 'com.peaqock.aml'
version = '0.0.1-BUILD'
sourceCompatibility = JavaVersion.VERSION_11

repositories {
    maven { url 'https://repo.spring.io/release' }
    mavenCentral()
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.boot:spring-boot-starter-aop'
    implementation 'org.springframework.boot:spring-boot-starter-mail'
    implementation 'org.springframework.boot:spring-boot-starter-cache'
    implementation 'org.springframework.boot:spring-boot-starter-security'
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.boot:spring-boot-starter-actuator'
    implementation 'org.springframework.boot:spring-boot-starter-validation'
    implementation 'org.springframework.boot:spring-boot-starter-thymeleaf'
    implementation 'com.fasterxml.jackson.core:jackson-databind'
    implementation "org.apache.poi:poi:$poiVersion"
    implementation "org.apache.poi:poi-ooxml:$poiVersion"
    implementation "io.jsonwebtoken:jjwt-api:$jsonwebtokenVersion"
    implementation "io.jsonwebtoken:jjwt-impl:$jsonwebtokenVersion"
    implementation "io.jsonwebtoken:jjwt-jackson:$jsonwebtokenVersion"
    implementation "nl.basjes.parse.useragent:yauaa:$yauaaVersion"
    implementation "com.maxmind.geoip2:geoip2:$geoip2Version"
    implementation "org.apache.commons:commons-lang3:$lang3Version"
    implementation "commons-io:commons-io:$commonsIOVersion"
    implementation "com.google.code.gson:gson:$gsonVersion"
    implementation "org.springdoc:springdoc-openapi-ui:$springdocVersion"
    implementation "org.springdoc:springdoc-openapi-webmvc-core:$springdocVersion"
    implementation "org.passay:passay:$passayVersion"
    implementation "com.vladmihalcea:hibernate-types-55:$hibernateTypes"
    compileOnly "org.mapstruct:mapstruct:$mapStructVersion", "org.projectlombok:lombok:$lombokVersion"
    annotationProcessor "org.mapstruct:mapstruct-processor:$mapStructVersion", "org.projectlombok:lombok:$lombokVersion",
            "org.projectlombok:lombok-mapstruct-binding:$lombokMapstructBindingVersion"
    annotationProcessor 'org.springframework.boot:spring-boot-configuration-processor'
    runtimeOnly 'org.postgresql:postgresql'
}

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

compileJava {
    options.compilerArgs += [
            '-Amapstruct.defaultComponentModel=spring',
            '-Amapstruct.unmappedTargetPolicy=IGNORE'
    ]
}

jib {
    from {
        image = "${baseImage}"
    }
    to {
        if (project.hasProperty("ecrRegistry")) {
            image = "${ecrRegistry}:${imageTag}"
        } else if (project.hasProperty("ghcrRegistry")) {
            image = "${ghcrRegistry}"
        } else {
            image = "${project.name}:${imageTag}"
        }
        if (project.hasProperty("registryUser")
                && project.hasProperty("registryPassword")) {
            auth {
                username = "${registryUser}" // Defined in 'gradle.properties'.
                password = "${registryPassword}"
            }
        } else if (project.hasProperty("ecrRegistry")) {
            credHelper = 'ecr-login'
        }
    }
    extraDirectories {
        paths {
            path {
                from = file('keys')
                into = '/keys'
            }
        }
    }
    container {
        creationTime = "USE_CURRENT_TIMESTAMP"
        jvmFlags = ['-server', '-Xtune:virtualized', '-XX:+UseContainerSupport',
                    '-XX:MaxRAMPercentage=80', '-Duser.timezone=UTC',
                    '-Djava.security.egd=file:/dev/./urandom'
        ]
    }
}
